import collections
pets = {1:{"Мухтар": {"Вид питомца": "собака","Возраст питомца": 9,"Имя владельца": "Павел"}}, 
2:{"Каа": {"Вид питомца": "желторотый питон","Возраст питомца": 14,"Имя владельца": "Саша"}},
3:{"Спайк":{"Вид питомца":"хомяк","Возраст питомца": 2, "Имя владельца": "Ольга"}}}

# создавать новую запись с информацией о питомце и добавлять эту информацию в наш словарь pets
def create():
 last = collections.deque(pets, maxlen=1)[0]
 cmd = input('Введите команду 1-далее/другой символ-стоп:')
 while cmd == '1':
  last += 1
  name = input('Кличка питомца:')
  type = input('Вид питомца:')
  age = int(input('Возраст питомца:'))
  owner_name = input('Имя владельца:')
  pets_info = {'Вид питомца':type, 'Возраст питомца':age, 'Имя владельца':owner_name}
  pets_name = {name:pets_info}
  pets[last] = pets_name
  last = collections.deque(pets, maxlen=1)[0]
  cmd = input('Введите команду 1 - далее/другой символ - стоп:')
 else:
  return(pets)
# функция, с помощью которой вы получите информацию о питомце в виде словаря
# сделайте проверку, если питомца с таким ID нету в нашей "базе данных"
# верните в этом случае False
# а если питомец всё же есть в "базе данных" - верните информацию о нём
def get_pet(id):
 return pets.get(id, False)

# функция, с помощью которой можно получить суффикс
# 'год', 'года', 'лет'
def get_suffix(age):
 f = age%10
 k = age%100
 if age == 1 or f == 1 and k >=21:
  return "год"
 elif age > 1 and age < 5 or f > 1 and f < 4:
  return "года"
 else:
  return "лет"

# данная функция будет отображать информацию о запрашиваемом питомце в виде:
# (Это желторотый питон по кличке "Каа". Возраст питомца: 19 лет. Имя владельца: Саша)
def read():
 id = int(input("Введите id: "))
 if pets.get(id): 
  pet = get_pet(id)
  for keys in pet:
   v = f'{keys}'
  p = pet[v]['Вид питомца']
  age = pet[v]['Возраст питомца']
  h = pet[v]['Имя владельца']
  print(f'Это {p} по кличке "{v}". Возраст питомца: {age} {get_suffix(age)}. Имя владельца: {h}')
 else:
  print('Питомца с таким id не существует')

# данная функция будет обновлять информацию об указанном питомце
def update():
 id = int(input("Введите id: "))
 if pets.get(id):
  pet = get_pet(id)
  name = input('Кличка питомца:') 
  type = input('Вид питомца:') 
  age = int(input('Возраст питомца:'))
  owner_name = input('Имя владельца:')
  pets[id] = {name:{'Вид питомца':type, 'Возраст питомца':age, 'Имя владельца':owner_name}}
  print('Была изменена запись:')
  print(pet)
  print('Обновлённый словарь:')
  print(pets)
 else:
  print('Питомца с таким id не существует')

# данная функция будет удалять запись о существующем питомце
def delete():
 id = int(input("Введите id: "))
 if pets.get(id):
  pet = get_pet(id)
  pets.pop(id)
  print('Информация о питомце удалена.')
  print(pets)
 else:
  print('Питомца с таким id не существует')

# Эта функция будет создана для удобства отображения всего списка питомцев
# Информацию по каждому питомцу можно вывести с помощью цикла for
def pets_list():
 pp = list(pets.items())
 pet = list(pets.values())
 s = []
 for values in pet:
  m = values
  f = list(m)
  s.append(*f)
 cm = input('Вывести список питомцев-1, Вывести информацию по каждому питомцу-2: ')
 if cm == '1':
  print(*s, sep=', ')
 else:
  for values in pet:
   m = values
   f = list(m)
   r = list(m. values())
   print(*f)
   print('Информация о  питомце:')
   l = str(r).replace('{','').replace('}','').replace('[','').replace(']','')
   print(l)
 
comanda = input('Введите доступную команду(создать новую запись-1, информация о питомце по id-2, обновить информацию-3,информация о питомце в виде словаря по id-4,удалить информацию-5,отобразить информацию о всех питомцах в виде списка-6, выйти из программы-7)')
while comanda != '7':
 if comanda == '1':
  create()
  print(pets)
  comanda = input('Введите доступную команду(создать новую запись-1, информация о питомце по id-2, обновить информацию-3,информация о питомце в виде словаря по id-4,удалить информацию-5,отобразить информацию о всех питомцах в виде списка-6, выйти из программы-stop)')
 if comanda == '2':
  read()
  comanda = input('Введите доступную команду(создать новую запись-1, информация о питомце по id-2, обновить информацию-3,информация о питомце в виде словаря по id-4,удалить информацию-5,отобразить информацию о всех питомцах в виде списка-6, выйти из программы-stop)')
 elif comanda == '3':
  update()
  comanda = input('Введите доступную команду(создать новую запись-1, информация о питомце по id-2, обновить информацию-3,информация о питомце в виде словаря по id-4,удалить информацию-5,отобразить информацию о всех питомцах в виде списка-6, выйти из программы-stop)')
 elif comanda == '4':
  n = int(input('Введите id питомца:'))
  id = n
  j = get_pet(id)
  print(j)
  comanda = input('Введите доступную команду(создать новую запись-1, информация о питомце по id-2, обновить информацию-3,информация о питомце в виде словаря по id-4,удалить информацию-5,отобразить информацию о всех питомцах в виде списка-6, выйти из программы-stop)')
 elif comanda == '5':
  delete()
  comanda = input('Введите доступную команду(создать новую запись-1, информация о питомце по id-2, обновить информацию-3,информация о питомце в виде словаря по id-4,удалить информацию-5,отобразить информацию о всех питомцах в виде списка-6, выйти из программы-stop)')
 elif comanda == '6':
  pets_list()
  comanda = input('Введите доступную команду(создать новую запись-1, информация о питомце по id-2, обновить информацию-3,информация о питомце в виде словаря по id-4,удалить информацию-5,отобразить информацию о всех питомцах в виде списка-6, выйти из программы-stop)')
 else:
  print('Извините, такой команды нет в списке доступных команд')
  comanda = input('Введите доступную команду(создать новую запись-1, информация о питомце по id-2, обновить информацию-3,информация о питомце в виде словаря по id-4,удалить информацию-5,отобразить информацию о всех питомцах в виде списка-6, выйти из программы-stop)')